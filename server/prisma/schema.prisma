generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CANDIDATE
  RECRUITER
}

model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName   String
  email      String   @unique
  password   String
  role       UserRole @default(CANDIDATE)
  isVerified Boolean  @default(false)
  image      String?
  bio        String?
  createdAt  DateTime @default(now())

  companies     Company[]
  jobs          Job[]
  applications  Application[]
  notifications Notification[]
}

model Company {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  logo       String
  websiteUrl String?
  about      String
  city       String
  state      String
  country    String
  createdAt  DateTime @default(now())

  jobs Job[]

  recruiter   User   @relation(fields: [recruiterId], references: [id], onDelete: Cascade)
  recruiterId String @db.ObjectId

  @@unique([name, city, state, country])
  @@index([recruiterId])
}

enum TypeOfJob {
  FULL_TIME
  PART_TIME
  FREELANCE
  INTERNSHIP
}

enum TypeOfLocation {
  REMOTE
  ONSITE
  HYBRID
}

enum JobStatus {
  OPEN
  CLOSE
}

model Job {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  skills       String[]
  experience   Int            @default(0)
  type         TypeOfJob      @default(FULL_TIME)
  minSalary    Int
  maxSalary    Int
  location     String?
  locationType TypeOfLocation @default(ONSITE)
  status       JobStatus      @default(OPEN)
  createdAt    DateTime       @default(now()) @updatedAt

  applications Application[]

  recruiter   User    @relation(fields: [recruiterId], references: [id], onDelete: Cascade)
  recruiterId String  @db.ObjectId
  Company     Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   String  @db.ObjectId

  @@index([companyId])
  @@index([recruiterId])
}

enum ApplicationStatus {
  PENDING
  SHORTLISTED
  REJECTED
}

model Application {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  resumeUrl   String
  coverLetter String
  status      ApplicationStatus @default(PENDING)
  matching    Float?
  createdAt   DateTime          @default(now()) @updatedAt

  candidate   User   @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId String @db.ObjectId
  job         Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId       String @db.ObjectId

  @@unique([candidateId, jobId])
  @@index([jobId])
  @@index([candidateId])
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  @@index([userId])
}
